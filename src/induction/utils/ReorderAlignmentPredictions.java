package induction.utils;

import induction.Utils;
import induction.problem.event3.Event3Example;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author sinantie
 */
public class ReorderAlignmentPredictions
{   
    // predFile contains the actual predictions generated by the alignment model,
    // one example per line. RefFile contains the alignments associated with their key.
    String predFile, refFile, prefix;
    List<Event3Example> examples;    
    
    public ReorderAlignmentPredictions(String goldPath, String predFile, String refFile, boolean examplesInSingleFile, String prefix)
    {
        this.predFile = predFile;
        this.refFile = refFile;
        this.prefix = prefix;
        examples = Utils.readEvent3Examples(goldPath, examplesInSingleFile);
    }
    
    public void execute()
    {
        String[] predictions = Utils.readLines(predFile);
        String[] predictionsOrdered = new String[predictions.length];
        Map<String, Integer> refMap = new HashMap<>();
        int i = 0;
        // grab id and order in file
        for(String ex : Utils.readLines(refFile))
        {
            String key = ex.split(":")[0];
            if(!(prefix.isEmpty() || prefix.equals("--")) )            
                key = Utils.stripExtension(key.substring(key.indexOf(prefix)));
            refMap.put(key, i++);
//            System.out.println(i);
        }
        i = 0;
        // match ids
        for(Event3Example ex : examples)
        {
            Integer id = refMap.get(ex.getName());
            if(id != null)
            {
                predictionsOrdered[i++] = predictions[id];
            }
            else
            {
                System.out.println("Could not find example " + ex.getName());
                predictionsOrdered[i++] = "not_found";
            }
        }
        // write output
        Utils.writeLines(predFile + ".sorted", predictionsOrdered);                        
    }
    
    public static void main(String[] args)
    {
        boolean examplesInSingleFile = true;
        // weatherGov
//        String prefix = "data/weather-data-full/data/";
//        String goldFile = "data/weatherGov/weatherGovTrainGaborRecordTreebankUnaryRules.gz";
//        String predFile = "results/output/weatherGov/alignments/pcfg/model_3_gabor_record_pcfg_treebank_unaryRules_wordsPerRootRule_30iter/stage1.train.pred.29";
//        String refFile = "results/output/weatherGov/alignments/pcfg/model_3_gabor_record_pcfg_treebank_unaryRules_wordsPerRootRule_30iter/stage1.train.full-pred.29";
//        
        // blocksWorld
        String prefix = "--";
        String goldFile = "datasets/GoldLogo/Records.train";
        String predFile = "results/GoldLogo/alignments/0.exec/stage1.train.pred.14";
        String refFile = "results/GoldLogo/alignments/0.exec/stage1.train.full-pred.14";
        
        if(args.length > 0) 
        {
            prefix = args[0];
            goldFile = args[1];
            predFile = args[2];
            refFile = args[3];
            
        }
        // winhelp all
//        String prefix = "";
//        String goldFile = "data/branavan/winHelpHLA/winHelpRL.cleaned.objType.norm.docs.all.newAnnotation";
//        String predFile = "results/output/winHelp/alignments/model_3_docs_no_null_newAnnotation/all/stage1.train.pred.1";
//        String refFile = "results/output/winHelp/alignments/model_3_docs_no_null_newAnnotation/all/stage1.train.full-pred.1";
//        
        ReorderAlignmentPredictions rep = new ReorderAlignmentPredictions(goldFile, predFile, refFile, examplesInSingleFile, prefix);
        rep.execute();
        
        // winhelp folds
//        int folds=10;
//        for(int f = 1; f<=folds; f++)
//        {
//            String goldFile = "data/branavan/winHelpHLA/folds/docs.newAnnotation.removedOutliers/winHelpFold"+f+"Train";
//            String predFile = "results/output/winHelp/alignments/model_3_docs_no_null_newAnnotation/fold"+f+"/stage1.train.pred.1";
//            String refFile = "results/output/winHelp/alignments/model_3_docs_no_null_newAnnotation/fold"+f+"/stage1.train.full-pred.1";
//            ReorderAlignmentPredictions rep = new ReorderAlignmentPredictions(goldFile, predFile, refFile, examplesInSingleFile, prefix);
//            rep.execute();
//        }        
    }
}
